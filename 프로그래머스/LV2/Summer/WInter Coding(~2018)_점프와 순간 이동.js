function solution(n)
{
    // [실행] 버튼을 누르면 출력 값을 볼 수 있습니다.
    
    /*
    이동방식
    점프: 점프 커리만큼 건전지 사용
    순간이동: 현재까지 온 거리 *2 에 해당하는 위치로 간다., 건전지 사용 X
    
    0 1 2 3 4 5 6
   
    1. 한칸 점프
    2. 순간이동 -> 1까지 왔으므로 2로 간다.
    3. 
          
    짝수인 경우
    
    절반의 거리를 이동하는 최단거리를 구한다. (그 이후는 순간이동 하면 도착함.)
    
    홀수인 경우
    Math.floor() 까지 최단거리를 구한다. (그 이후는 순간이동후 1칸 전진)
    
    5000
    
    2500
    
    1250
    
    625 -> 1칸 전진 필요
    
    312
    
    106
    
    53 -> 1칸 전진 필요
    
    26
    
    13 -> 1칸 전진 필요
    
    6
    
    3 -> 1칸 전진 필요
    
    1 -> 1칸 전진 필요
    
    
    
    */
    
    let count = 0;
    while(true) {
        if(n === 1) {
            count += 1;
            break;
        }
        // 짝수
        if(n % 2 === 0) {
            n /= 2;
        }
        // 홀수
        else {
            n = Math.floor(n / 2);
            count += 1;
        }
    }
    
    return count
}